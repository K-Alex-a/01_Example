// string[,] table = new string[2, 5];
// String.Empty
// table[0,0] table[0,1] table[0,2] table[0,3] table[0,4]
// table[1,0] table[1,1] table[1,2] table[1,3] table[1,4]

// table[1, 2] = "слово";

// for (int rows = 0; rows < 2; rows++)
// {
//     for (int columns = 0; columns < 5; columns++)
//     {
//         Console.WriteLine($"-{table[rows, columns]}-");
//     }
// }


// Вариант 1:
// int[,] matrix = new int[3, 4];                            // задаем массив таблицы с наименованием matrix в 3 строки и 4 столбца

// void PrintArray(int[,] matr)                              // присвоение методу наименования, который далее будет делать разметку таблицы
// {
//     for (int i = 0; i < matrix.GetLength(0); i++)         // пока i меньше кол-ва строк, то ->
//     {
//         for (int j = 0; j < matrix.GetLength(1); j++)     // пока ш меньше кол-ва столбцов, то ->
//         {
//             Console.Write($"{matrix[i, j]} ");            // выводим на печать i и j (в данном варианте равняются 0) через пробел 
//         }
//         Console.WriteLine();                              // разделитель, чтобы строки не были в один ряд 
//     }
// }

// void FillArray(int[,] matr)                                   // присвоение методу наименования, который далее будет делать разметку таблицы
// {
//     for (int i = 0; i < matr.GetLength(0); i++)               // пока i меньше кол-ва строк, то ->
//     {
//         for (int j = 0; j < matr.GetLength(1); j++)           // пока ш меньше кол-ва столбцов, то ->
//         {
//             matr[i, j] = new Random().Next(1, 10);             // проводим заполнение массива рандомными числами от 1 до 9
//             Console.Write($"{matrix[i, j]} ");
//         }
//         Console.WriteLine();                                  // разделитель, чтобы строки не были в один ряд 
//     }
// }

// PrintArray(matrix);
// Console.WriteLine();                                       // разделительная между таблицами, если запустить и 2-1 метод
// FillArray(matrix);                                         // запускаем метод (30)



// *****----Закрашиваем область----*****
// Вариант 2:
// int[,] pic = new int[,]
// {   {0, 0, 0, 1, 0, 0, 0},
//     {0, 0, 1, 0, 1, 0, 0},
//     {0, 1, 0, 0, 0, 1, 0},
//     {1, 0, 0, 0, 0, 0, 1},
//     {0, 1, 0, 0, 0, 1, 0},
//     {0, 0, 1, 0, 1, 0, 0},
//     {0, 0, 0, 1, 0, 0, 0},
// };

// void PrintImage(int[,] image)                               // метод, рисующий контур
// {
//     for (int i = 0; i < image.GetLength(0); i++)            // если i меньше кол-ва строк, то прибавляем к i единицу и проваливаемся в след.цикл ->
//     {
//         for (int j = 0; j < image.GetLength(1); j++)       // если j меньше кол-ва столбцов, то прибавляем к j единицу и проваливаемся к условию ->
//         {
//             if (image[i, j] == 0) Console.Write($" ");     // если нахождение в текущем месте со значение ноль, то выводим на печать пробел
//             else Console.Write($"+");                      // иначе выводим на печать единицу
//         }
//         Console.WriteLine();
//     }
// }

// void FillImage(int row, int col)        // метод, меняющий значения с 9 на 1, после чего обратится к методу (63) что закрасит + все значения где 1
// {
//     if (pic[row, col] == 0)             // если место нахождения в колонке со значением равным нулю, то ->
//     {
//         pic[row, col] = 1;              // меняем значение с нуля на единицу
//         FillImage(row - 1, col);        // шаг вверх в котором запускаем метод (76)                    
//         FillImage(row, col - 1);        // шаг влево в котором запускаем метод (76) 
//         FillImage(row + 1, col);        // шаг вниз в котором запускаем метод (76) 
//         FillImage(row, col + 1);        // шаг вправо в котором запускаем метод (76) 
//     }
// }

// PrintImage(pic);
// FillImage(3, 3);
// PrintImage(pic);



//******-----Пример метда в методе через факториал-----******
// n! = n1 * n2 * n3 * ... * nn
// 1! = 1 (факториал единицы равен единице) && 0! = 1
// 3! = 3 * 2 * 1
// Вариант 3:

// double Factorial(int n)
// {
//     if (n == 1) return 1;                           // 1! = 1 (факториал единицы равен единице) && 0! = 1
//     else return n * Factorial(n - 1);               // иначе возвращаем ...
// }

// for (int i = 1; i < 40; i++)                        // запуск цикла до 39
// {
//     Console.WriteLine($"{i}! = {Factorial(i)}");    // вывод на печать всех результатов от 1 до 39
// }


//******-----Пример метода в методе для чисел Фибоначи-----******
// Вариант 4:
// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)

double Fibonacci(int n)                                             // создаем метод на просчет числа Фибоначи
{
    if (n == 1 || n == 2) return 1;                                 // проверка двойным условием
    else return Fibonacci(n - 1) + Fibonacci(n - 2);                // расчет числа Фибоначи
}

for (int i = 1; i < 50; i++)                                        // запускаем цикл на первые 49 чисел (начинает тупить на 40++) 
{
    Console.WriteLine($"Fibonacci({i}) = {Fibonacci(i)}");          // вывод на печать результата
}